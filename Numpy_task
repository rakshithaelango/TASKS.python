#1  Import the numpy package under the name  
        import numpy as np
       
#2  Print the numpy version and the configuration  
        print(np.__version__)
        print(np.show_config)#
        
#3  Create a null vector of size 10
        x = np.zeros(10)
        x
        
#4  How to find the memory size of any array    
        x = np.array([100,20,34])
        print(x.size)
        x = np.array([100,20,34])
        print(x.itemsize)
        
        print(x.size * x.itemsize)
        
#5 How to get the documentation of the numpy add function from the command line?
         "import numpy; numpy.info(numpy.add)"
         
#6 Create a null vector of size 10 but the fifth value which is 1
          a=np.zeros(10)
          a[4]=1
          print(a)
          
#7 Create a vector with values ranging from 10 to 49
           np.arange(10, 50)
           
#8  Reverse a vector (first element becomes last)
           a=np.array([2,4,6,8,0])
           print(a[::-1])
           
#9 Create a 3x3 matrix with values ranging from 0 to 8
          a=np.arange(0,9)
          print(a)
          b_=a.reshape(3,3)
          print(b_a)

#10 Find indices of non-zero elements from [1,2,0,0,4,0]
         a= np.nonzero([1,2,0,0,4,0])
         print(a)

#11 Create a 3x3 identity matrix
         I = np.eye(3)
         I

#12 Create a 3x3x3 array with random values
          a = np.random.random([3,3,3])
          a

#13 Create a 10x10 array with random values and find the minimum and maximum values 
         a=np.random.randint(1,10,(4,4))
         print(a)
         print(a.min())
         print(a.max())

#14  Create a random vector of size 30 and find the mean value
        a = np.random.random((30))
        a.mean()

#15 Create a 2d array with 1 on the border and 0 inside
        a=np.ones((15,5))
        a[1:-1,1:-1]=0
        print(a)

#16  How to add a border (filled with 0's) around an existing array?
        Z = np.ones((5,5))
        Z = np.pad(Z, pad_width=1, mode='constant', constant_values=0)
        print(Z)

#17  What is the result of the following expression?
        0 * np.nan
        np.nan == np.nan
        np.inf > np.nan
        np.nan - np.nan
        0.3 == 3 * 0.1
      = False

#18 Create a 5x5 matrix with values 1,2,3,4 just below the diagonal 
         a=np.diag(np.arange(1,5),k=-1)
         print(a)

#19 Create a 8x8 matrix and fill it with a checkerboard pattern
         a = np.ones ((8,8), dtype=int)
         a[1::2,::2]= 0
         a[::2, 1::2] = 0
         print (a)

#20 Consider a (6,7,8) shape array, what is the index (x,y,z) of the 100th element
         print (np.unravel_index(100, (6,7,8)))

#21 Create a checkerboard 8x8 matrix using the tile function
         Z = np.tile( np.array([[0,1],[1,0]]), (4,4))
         print(Z)

#22 Normalize a 5x5 random matrix
        a=np.random.random((5,5))
        a_min,a_max=a.min(),a.max()
        normalize=(a-a_min)/(a_max-a_min)
        print(normalize)
        
#23 Create a custom dtype that describes a color as four unsigned bytes (RGBA)
                  color = np.dtype([("r", np.ubyte, 1),
                  ("g", np.ubyte, 1),
                  ("b", np.ubyte, 1),
                  ("a", np.ubyte, 1)])

#24 Multiply a 5x3 matrix by a 3x2 matrix (real matrix product)
         x=np.dot(np.ones((5,3)),np.ones((3,2)))
         print(x)       
 
#25 Given a 1D array, negate all elements which are between 3 and 8, in place.
          Z = np.arange(11)
          Z[(3 < Z) & (Z <= 8)] *= -1
          print(Z)
     
#26  What is the output of the following script?
        print(sum(range(5),-1))
        from numpy import *
        print(sum(range(5),-1))
OUTPUT = 9
         10

#27  Consider an integer vector Z, which of these expressions are legal? 
       (2 << Z >> 2)
       (Z <- Z)
       (1j*Z)
       (Z/1/1)
       (Z<Z>Z)

#28 What are the result of the following expressions
       np.array(0) / np.array(0)
       np.array(0) // np.array(0)
       np.array([np.nan]).astype(int).astype(float)
RESULT = <ipython-input-51-cd809174da5d>:1: RuntimeWarning: invalid value encountered in true_divide
  np.array(0) / np.array(0)
<ipython-input-51-cd809174da5d>:2: RuntimeWarning: divide by zero encountered in floor_divide
  np.array(0) // np.array(0)
array([-9.22337204e+18])

#29 How to round away from zero a float array ?
      a = np.random.uniform(-10,+10,10)
      print (np.copysign(np.ceil(np.abs(a)), a))

#30 How to find common values between two arrays?
     a = np.random.randint(0,10,10)
     b = np.random.randint(0,10,10)
     print(np.intersect1d(a,b))  
     
#31  How to ignore all numpy warnings (not recommended)? 


#32 Is the following expressions true?
    np.sqrt(-1) == np.emath.sqrt(-1) 
RESULT = False 

#33 How to get the dates of yesterday, today and tomorrow?
     print(np.datetime64)
  OUTPUT = <class 'numpy.datetime64'>

#34 How to get all the dates corresponding to the month of July 2016?
     A = np.arange('2016-07', '2016-08', dtype='datetime64[D]')
     print(A)

#35 How to compute ((A+B)*(-A/2)) in place (without copy)?   
     A = np.ones(3)*1
     B = np.ones(3)*2
     C = np.ones(3)*3
     np.add(A,B,out=B)
     np.divide(A,2,out=A)
     np.negative(A,out=A)
     np.multiply(A,B,out=A)   

#36 Extract the integer part of a random array using 5 different method
     
#37 Create a 5x5 matrix with row values ranging from 0 to 4
       a=np.zeros((5,5))
       a=a+np.arange(5)
       print(a)

#38 Consider a generator function that generates 10 integers and use it to build an array
      def generate(): 
    for x in range(10):
        yield x
        
A = np.fromiter(generate(),dtype=int)
print (A)

#39 Create a vector of size 10 with values ranging from 0 to 1, both excluded
     A = np.linspace(0,1,12,endpoint=True)[1:-1]
     print(A) 
      
#40  Create a random vector of size 10 and sort it       
     a=np.random.random(10)
     a.sort()
     print(a)  
      
#41 How to sum a small array faster than np.sum?
     Z = np.arange(5)
     np.add.reduce(Z)
      
#42 Consider two random array A and B, check if they are equal
     A = np.random.randint(0,1,2)
     B = np.random.randint(0,1,2)
     equal = np.allclose(A,B)
     print(equal)
     equal = np.array_equal(A,B)
     print(equal)
      
#43 Make an array immutable (read-only)      
       A = np.zeros(10)
       A.flags.writeable = False
       A[0] = 1    
      
#44 Consider a random 10x2 matrix representing cartesian coordinates, convert them to polar coordinates      
     Z = np.random.random((10,2))
     X,Y = Z[:,0], Z[:,1]
     A = np.sqrt(X**2+Y**2)
     B = np.arctan2(Y,X)
     print(A)
     print(B) 
      
#45 Create random vector of size 10 and replace the maximum value by 0      
    A = np.random.random(10)
    A[Z.argmax()] = 0
    print(A)   
      
#46 Create a structured array with x and y coordinates covering the [0,1]x[0,1] area      
     A = np.zeros((5,5), [('x',float),('y',float)])
     A['x'], Z['y'] = np.meshgrid(np.linspace(0,1,5),
                             np.linspace(0,1,5))
     print(A)   
      
#47 Given two arrays, X and Y, construct the Cauchy matrix C (Cij =1/(xi - yj))     
      X = np.arange(8)
      Y = X + 0.5
      C = 1.0 / np.subtract.outer(X, Y)
      print(np.linalg.det(C))
      
#48 Print the minimum and maximum representable value for each numpy scalar type      
    for dtype in [np.int8, np.int32, np.int64]:
   print(np.iinfo(dtype).min)
   print(np.iinfo(dtype).max)
for dtype in [np.float32, np.float64]:
   print(np.finfo(dtype).min)
   print(np.finfo(dtype).max)
   print(np.finfo(dtype).eps)  
      
#49 How to print all the values of an array?  
      
#50 How to find the closest value (to a given scalar) in a vector?      
    X = np.arange(100)
    Y = np.random.uniform(0,100)
    index = (np.abs(X-Y)).argmin()
    print(X[index])   
      
#51 Create a structured array representing a position (x,y) and a color (r,g,b)      
      A = np.zeros(10, [ ('position', [ ('x', float, 1),
                                  ('y', float, 1)]),
                   ('color',    [ ('r', float, 1),
                                  ('g', float, 1),
                                  ('b', float, 1)])])
     print(A)
      
#52 Consider a random vector with shape (100,2) representing coordinates, find point by point distances      
     
#53 How to convert a float (32 bits) array into an integer (32 bits) in place     
     A = np.arange(10, dtype=np.float32)
     A = A.astype(np.int32, copy=False)
     print(A.dtype)
     
#54 How to read the following file?    
     1, 2, 3, 4, 5
6,  ,  , 7, 8
 ,  , 9,10,11
 
 Z = np.genfromtxt("missing.dat", delimiter=",")    
     
#55 What is the equivalent of enumerate for numpy arrays?      
   A = np.arange(9).reshape(3,3)
for index, value in np.ndenumerate(A):
    print(index, value)
for index in np.ndindex(Z.shape):
    print(index, Z[index])  
     
#56 Generate a generic 2D Gaussian-like array     
  A, B = np.meshgrid(np.linspace(-1,1,10), np.linspace(-1,1,10))
  C = np.sqrt(X*X+Y*Y)
  sigma, mu = 1.0, 0.0
  D = np.exp(-( (C-mu)**2 / ( 2.0 * sigma**2 ) ) )
  print(D)   
     
#57 How to randomly place p elements in a 2D array
     n = 10
     p = 3
     X = np.zeros((n,n))
     np.put(X, np.random.choice(range(n*n), p, replace=False),1)
     print (X)
     
#58 Subtract the mean of each row of a matrix     
     X = np.random.rand(5, 10)
     Y = X - X.mean(axis=1, keepdims=True)
     (Y)
     
#59 How to sort an array by the nth column?  
     A = np.random.randint(0,10,(3,3))
     print(A)
     print(A[A[:,1].argsort()])
     
#60 How to tell if a given 2D array has null columns?     
     A = np.random.randint(0,2,(2,10))
     print(A)
     print((~A.any(axis=0)).any())
     
#61 Find the nearest value from a given value in an array     
     A = np.random.uniform(0,1,10)
     a = 0.5
     m = B.flat[np.abs(B - a).argmin()]
     (m)
     
#62  Considering two arrays with shape (1,3) and (3,1), how to compute their sum using an iterator?     
    A = np.arange(3).reshape(3,1)
    B = np.arange(3).reshape(1,3)
    it = np.nditer([A,B,None])
    for x,y,z in it: z[...] = x + y
    (it.operands[2]) 
     
#63 Create an array class that has a name attribute     
     class NamedArray(np.ndarray):
    def __new__(cls, array, name="no name"):
        obj = np.asarray(array).view(cls)
        obj.name = name
        return obj
    def __array_finalize__(self, obj):
        if obj is None: return
        self.info = getattr(obj, 'name', "no name")

Z = NamedArray(np.arange(10), "range_10")
(Z.name)
     
 #64 Consider a given vector, how to add 1 to each element indexed by a second vector (be careful with repeated indices)    
     A = np.ones(10)
     B = np.random.randint(0,len(Z),20)
     Z += np.bincount(B, minlength=len(Z))
     (Z) 
     
 #65 How to accumulate elements of a vector (X) to an array (F) based on an index list (I)    
     A = [2,4,6,8]
     B = [1,2,3,4]
     C = np.bincount(A,B)
     (C)
     
#66 Considering a (w,h,3) image of (dtype=ubyte), compute the number of unique colors     
     w,h = 2,2
     I = np.random.randint(0,2,(h,w,3)).astype(np.ubyte)
     F = I[...,0]*256*256 + I[...,1]*256 +I[...,2]
     n = len(np.unique(F))
     (np.unique(I))
     
#67 Considering a four dimensions array, how to get sum over the last two axis at once?     
     A = np.random.randint(0,10,(3,4,3,4))
     sum = A.reshape(A.shape[:-2] + (-1,)).sum(axis=-1)
     print(sum)
     
#68  Considering a one-dimensional vector D, how to compute means of subsets of D using a vector S of same size describing subset indices?     
     A = np.random.uniform(0,1,100)
     B = np.random.randint(0,10,100)
     A_sums = np.bincount(B, weights=A)
     A_counts = np.bincount(B)
     A_means = A_sums / A_counts
     (A_means)
     
 #69 How to get the diagonal of a dot product?    
     A = np.random.randint(0,10,(2,2))
     B= np.random.randint(0,10,(2,2))
     np.diag(np.dot(A, B))
     
 #70 Consider the vector [1, 2, 3, 4, 5], how to build a new vector with 3 consecutive zeros interleaved between each value?    
     A = np.array([1,2,3,4,5])
     nb = 3
     A0 = np.zeros(len(A) + (len(A)-1)*(nb))
     A0[::nb+1] = Z
     (A0)
     
#71  Consider an array of dimension (5,5,3), how to mulitply it by an array with dimensions (5,5)?     
     A = np.ones((5,5,3))
     B = 2*np.ones((5,5))
     print(A * B[:,:,None])
     
#72 How to swap two rows of an array? 
    A = np.arange(25).reshape(5,5)
    A[[0,1]] = A[[1,0]]
    (A) 
     
#73 Consider a set of 10 triplets describing 10 triangles (with shared vertices), find the set of unique line segments composing all the triangle
     faces = np.random.randint(0,100,(10,3))
     a = np.roll(faces.repeat(2,axis=1),-1,axis=1)
     a = a.reshape(len(a)*3,2)
     a = np.sort(a,axis=1)
     b = a.view( dtype=[('p0',a.dtype),('p1',a.dtype)] )
     b = np.unique(b)
    (b)
     
#74 Given an array C that is a bincount, how to produce an array A such that np.bincount(A) == C?     
    a = np.bincount([1,2,3,4,6])
    b = np.repeat(np.arange(len(a)), a)
    print(b) 
     
#75 How to compute averages using a sliding window over an array?      
def moving_average(a, n=3) :
    ret = np.cumsum(a, dtype=float)
    ret[n:] = ret[n:] - ret[:-n]
    return ret[n - 1:] / n
A = np.arange(20)
print(moving_average(A, n=3))
     
 #76 Consider a one-dimensional array Z, build a two-dimensional array whose first row is (Z[0],Z[1],Z[2]) and each subsequent row is shifted by 1 (last row should be (Z[-3],Z[-2],Z[-1])    
      def rolling(a, window):
    shape = (a.size - window + 1, window)
    strides = (a.itemsize, a.itemsize)
    return np.lib.stride_tricks.as_strided(a, shape=shape, strides=strides)
Z = rolling(np.arange(10), 3)
print(Z)
     
#77 How to negate a boolean, or to change the sign of a float inplace?     
      A = np.random.randint(0,2,100)
      ('original: ')
      (A)
      ('Negating a boolean: ')
      (np.logical_not(Z, out=Z))
 
#78 Consider 2 sets of points P0,P1 describing lines (2d) and a point p, how to compute distance from p to each line i (P0[i],P1[i])? 
    faces = np.random.randint(0,100,(10,3))
     a = np.roll(faces.repeat(2,axis=1),-1,axis=1)
     a = a.reshape(len(a)*3,2)
     a = np.sort(a,axis=1)
     b = a.view( dtype=[('p0',a.dtype),('p1',a.dtype)] )
     b = np.unique(b)
    (b)
      
#79 Consider 2 sets of points P0,P1 describing lines (2d) and a set of points P, how to compute distance from each point j (P[j]) to each line i (P0[i],P1[i])     
      P0 = np.random.uniform(-10, 10, (5,2))
      P1 = np.random.uniform(-10,10,(5,2))
      p = np.random.uniform(-10, 10, (5,2))
      print(np.array([distance(P0,P1,p_i) for p_i in p]))
     
#80 Consider an arbitrary array, write a function that extract a subpart with a fixed shape and centered on a given element (pad with a fill value when necessary)     
     
     
#81 Consider an array Z = [1,2,3,4,5,6,7,8,9,10,11,12,13,14], how to generate an array R = [[1,2,3,4], [2,3,4,5], [3,4,5,6], ..., [11,12,13,14]]?     
    Z = np.arange(1,15,dtype=int)
def rolling(a, window):
    shape = (a.size - window + 1, window)
    strides = (a.itemsize, a.itemsize)
    return np.lib.stride_tricks.as_strided(a, shape=shape, strides=strides)
R = rolling(Z, 4)
print ('original: ')
print (Z)
print ('after strides: ')
print(R) 
     
 #82 Compute a matrix rank    
     a = np.random.uniform(0,1,(10,10))
     b, c, d = np.linalg.svd(a) # Singular Value Decomposition
     rank = np.sum(S > 1e-10)
     (rank)
     
#83 How to find the most frequent value in an array?     
     a = np.random.randint(0,10,50)
    (a)
    ('rank:', np.bincount(a).argmax())
     
#84 Extract all the contiguous 3x3 blocks from a random 10x10 matrix 
   a = np.random.randint(0,5,(6,6))
   b = 3
   C = 1 + (Z.shape[0]-3)
   d = 1 + (Z.shape[1]-3)
   e = np.lib.stride_tricks.as_strided(a, shape=(C, d, b, b), strides=a.strides + a.strides)
   print(e)  
     
#85 Create a 2D array subclass such that Z[i,j] == Z[j,i]     
     
 #86 Consider a set of p matrices wich shape (n,n) and a set of p vectors with shape (n,1). How to compute the sum of of the p matrix products at once? (result has shape (n,1))    
      A, n = 10, 30
      B = np.ones((p,n,n))
      C = np.ones((p,n,1))
      D = np.tensordot(M, V, axes=[[0, 2], [0, 1]])
     (D)
     
#87 Consider a 16x16 array, how to get the block-sum (block size is 4x4)?     
   A = np.ones((16,16))
   B = 4
   C = np.add.reduceat(np.add.reduceat(Z, np.arange(0, A.shape[0], B), axis=0),
                                       np.arange(0, A.shape[1], B), axis=1)
   ('input array')
   (A)
   ('block sum')
   (C)
   
#88 How to implement the Game of Life using numpy arrays?    
   
#89 How to get the n largest values of an array  
    A = np.arange(10000)
    np.random.shuffle(A)
    n = 5
    print (A[np.argsort(A)[-n:]])
    print (A[np.argpartition(-A,n)[:n]])
   
#90 Given an arbitrary number of vectors, build the cartesian product (every combinations of every item)   
   
#91  How to create a record array from a regular array? 
     Z = np.array([("HI", 0, 3),
               ("H R U", 2, 2)])
   R = np.core.records.fromarrays(Z.T,
                               names='col1, col2, col3',
                               formats = 'S8, f8, i8')
   
   
 #92 Consider a large vector Z, compute Z to the power of 3 using 3 different methods
             x = np.random.rand(2e7)
             %timeit np.power(x,6)
             %timeit x*x*x
             %timeit np.einsum('i,i,i->i',x,x,x)
   
   
 #93 Consider two arrays A and B of shape (8,3) and (2,2). How to find rows of A that contain elements of each row of B regardless of the order of the elements in B?   
        A = np.random.randint(0,5,(8,3))
        B = np.random.randint(0,5,(2,2))
        C = (A[..., np.newaxis, np.newaxis] == B)
        rows = (C.sum(axis=(1,2,3)) >= B.shape[1]).nonzero()[0]
        (rows)
   
#94 Considering a 10x3 matrix, extract rows with unequal values (e.g. [2,2,3])   
   A = np.random.randint(0,5,(10,3))
   B = np.logical_and.reduce(Z[:,1:] == Z[:,:-1], axis=1)
   C = Z[~B]
   (A)
   (C)
   
#95 Convert a vector of ints into a matrix binary representation
     I = np.array([0, 1, 2, 3, 15, 16, 32, 64, 128])
     B = ((I.reshape(-1,1) & (2**np.arange(8))) != 0).astype(int)
     print(B[:,::-1])
     I = np.array([0, 1, 2, 3, 15, 16, 32, 64, 128], dtype=np.uint8)
     print(np.unpackbits(I[:, np.newaxis], axis=1))

#96 Given a two dimensional array, how to extract unique rows?
     
#97 Considering 2 vectors A & B, write the einsum equivalent of inner, outer, sum, and mul function
     A= np.arange(3)
     B =  np.arange(12).reshape(3,4)
     (A)

#98 Considering a path described by two vectors (X,Y), how to sample it using equidistant samples
   
#99 Given an integer n and a 2D array X, select from X the rows which can be interpreted as draws from a multinomial distribution with n degrees, i.e., the rows which only contain integers and which sum to n
     A = np.asarray([[1.0, 0.0, 3.0, 8.0],
                [2.0, 0.0, 1.0, 1.0],
                [1.5, 2.5, 1.0, 0.0]])
n = 4
B = np.logical_and.reduce(np.mod(A, 1) == 0, axis=-1)
B &= (A.sum(axis=-1) == n)
[[A,B]]

#100  Compute bootstrapped 95% confidence intervals for the mean of a 1D array X (i.e., resample the elements of an array with replacement N times, compute the mean of each sample, and then compute percentiles over the means)
   X = np.random.randn(100) # random 1D array
   N = 1000 # number of bootstrap samples
   idx = np.random.randint(0, X.size, (N, X.size))
   means = X[idx].mean(axis=1)
   confint = np.percentile(means, [2.5, 97.5])
   (confint)









     
     
     


